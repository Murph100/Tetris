### Tetris ###

from tkinter import*
import random
import copy

def init(data):
    data["tetrisPieces"] = [[
    [ True,  True,  True,  True]
  ], [
    [ True, True, True ],
    [ False, False,  True]
  ], [
    [ True, True, True],
    [ True, False,  False]
  ], [
    [ True, True],
    [ True, True]
  ], [
    [ False, True, True],
    [ True,  True, False ]
  ], [
    [ False, True, False ],
    [ True,  True, True]
  ], [
    [ True,  True, False ],
    [ False, True, True]
  ]]
    data["tetrisPieceColor"] = ["red", "yellow", "magenta", "blue", "cyan", "green", "orange"]
    data["boxSize"] = 25
    data["board"] = [ ]
    data["placed"] = [ ]
    data["row"] = 15
    data["col"] = 10
    data["newFallingPiece"] = ""
    data["fallingPieceColor"] = ""
    data["start"] = ""
    data["score"] = 0

### Main Functions ###

def redrawAll(canvas, data):
    buildGrid(canvas, data)
    canvas.create_rectangle(400, 100, 450, 130, outline="black")
    canvas.create_text(370, 115, text="Score")
    canvas.create_text(425, 115, text=data["score"])

def mousePressed(event, data):
    pass

def keyPressed(event, data):
    if(event.keysym == "Right"):
        collision(data)
        board(data)
        if(data["start"][0] + len(data["newFallingPiece"][0]) < data["col"]):
            data["start"][0] += 1
        drawFallingPiece(data)
    if(event.keysym == "Left"):
        collision(data)
        board(data)
        if(data["start"][0] > 0):
            data["start"][0] -= 1
        drawFallingPiece(data)
    if(event.keysym == "Down"):
        collision(data)
        board(data)
        if(data["start"][1] + len(data["newFallingPiece"]) < data["row"]):
            data["start"][1] += 1
        drawFallingPiece(data)
    if(event.keysym == "Up"):
        collision(data)
        board(data)
        data["newFallingPiece"] = transpose(data)
        if(data["start"][1] + len(data["newFallingPiece"][0]) > data["col"]):
            data["start"][1] = data["start"][1] - (data["start"][1] + len(data["newFallingPiece"][0]) - data["col"])
        drawFallingPiece(data)
    if(event.keysym == "r"):
        board(data)
        newFallingPiece(data)
        start(data)
        drawFallingPiece(data)

def timerFired(data):
    data["start"][1] += 1
    board(data)
    collision(data)
    drawFallingPiece(data)
    print(data["start"])

### Board

def board(data):
    board = [ ]
    row = data["row"]
    col = data["col"]
    for i in range(row):
        board.append([ ])
        for x in range(col):
            if(not data["placed"][i][x] == "white"):
                board[i].append((data["placed"][i][x]))
            else:
                board[i].append("white")
    data["board"] = board

def placed(data):
    placed = data["placed"]
    row = data["row"]
    col = data["col"]
    for i in range(row):
        placed.append([ ])
        for x in range(col):
            placed[i].append("white")
    data["placed"] = placed

def buildGrid(canvas, data):
    boxSize = data["boxSize"]
    row = data["row"]
    col = data["col"]
    for i in range(col):
        for x in range(row):
            color = data["board"][x][i]
            canvas.create_rectangle(50 + 25*i, 50 + 25*x, 75 + 25*i, 75 + 25*x, fill=color, width=2)

def shiftStuck(data):
    row = data["row"]
    col = data["col"]
    count = 0
    for i in range(row):
        if(not "white" in data["placed"][i]):
            L2 = [[ ]]
            data["placed"].pop(i)
            for a in range(col):
                L2[0].append("white")
            for b in range(len(data["placed"])):
                L2.append(data["placed"][b])
            data["placed"] = L2
            board(data)
            count += 1
        if(i == row - 1) and (count > 0):
            data["score"] += count**2

### Pieces

def start(data):
    col = (data["col"] // 2) - (len(data["newFallingPiece"][0]) // 2)
    row = 0
    data["start"] = [col, row]

def newFallingPiece(data):
    z = random.randint(0,6)
    data["newFallingPiece"] = (data["tetrisPieces"])[z]
    data["fallingPieceColor"] = data["tetrisPieceColor"][z]

def drawFallingPiece(data):
    piece = data["newFallingPiece"]
    color = data["fallingPieceColor"]
    for i in range(len(piece)):
        for x in range(len(piece[i])):
            if(piece[i][x] == True):
                (data["board"])[(data["start"][1] + i)][(data["start"][0] + x)] = color

def transpose(data):
    piece = data["newFallingPiece"]
    newList = [ ]
    for i in range(len(piece)):
        for x in range(len(piece[i])):
            if(i == 0):
                newList.append([ ])
            newList[x].append(piece[i][x])
    return newList

def collision(data):
    (row, col) = data["start"]
    key = (row, col)
    if(offGrid(data)):
        stickPiece(data)
        shiftStuck(data)
        newFallingPiece(data)
        drawFallingPiece(data)
    else:
        piece = data["newFallingPiece"]
        color = data["fallingPieceColor"]
        for i in range(len(piece)):
            for x in range(len(piece[i])):
                if (piece[i][x] == True):
                    if((data["start"][1] + i) >= data["row"]):
                        stickPiece(data)
                        shiftStuck(data)
                        newFallingPiece(data)
                        drawFallingPiece(data)

def offGrid(data):
    piece = data["newFallingPiece"]
    color = data["fallingPieceColor"]
    for i in range(len(piece)):
        for x in range(len(piece[i])):
            if (piece[i][x] == True):
                if(data["start"][1] + i + 1 >= data["row"]):
                    break
                if(not data["placed"][(data["start"][1] + i)][(data["start"][0] + x)] == "white"):
                    return True
    return False

def stickPiece(data):
    piece = data["newFallingPiece"]
    color = data["fallingPieceColor"]
    for i in range(len(piece)):
        for x in range(len(piece[i])):
            if(piece[i][x] == True):
                data["placed"][(data["start"][1] + i - 1)][(data["start"][0] + x)] = color
    board(data)
    data["start"] = [4, 0]




### Run Function ###

def run(width=300, height=300):
    def redrawAllWrapper(canvas, data):
        canvas.delete(ALL)
        redrawAll(canvas, data)
        canvas.update()    
    def mousePressedWrapper(event, canvas, data):
        mousePressed(event, data)
        redrawAllWrapper(canvas, data)
    def keyPressedWrapper(event, canvas, data):
        keyPressed(event, data)
        redrawAllWrapper(canvas, data)
    def timerFiredWrapper(canvas, data):
        timerFired(data)
        redrawAllWrapper(canvas, data)
        canvas.after(data["timerDelay"], timerFiredWrapper, canvas, data)
    data = dict()
    data["width"] = width
    data["height"] = height
    data["timerDelay"] = 1000
    init(data)
    root = Tk()
    canvas = Canvas(root, width=data["width"], height=data["height"])
    canvas.pack()
    placed(data)
    newFallingPiece(data)
    start(data)
    board(data)
    redrawAll(canvas, data)
    timerFiredWrapper(canvas, data)
    root.bind("<Button-1>", lambda event:
                            mousePressedWrapper(event, canvas, data))
    root.bind("<Key>", lambda event:
                            keyPressedWrapper(event, canvas, data))
    root.mainloop()  
    print("bye!")

run(500, 500)
